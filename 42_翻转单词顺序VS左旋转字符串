问题42：翻转单词顺序VS左旋转字符串

问题1：
输入一个英文句子，翻转句子中单词顺序，而单词内部字符顺序不变；
input : "I am a student." 
output: "student. a am I"

思路：
先把整个句子反转一次，再把每个单词各自反转一次。

//=====课本代码
void Reverse(char *pBegin, char *pEnd)
{
    if(pBegin == NULL || pEnd == NULL)
        return;
    while(pBegin < pEnd)
    {
        char tmp = *pBegin;
        *pBegin = *pEnd;
        *pEnd = tmp;
        pBegin++;
        pEnd--;
    }
}
char* ReverseSentence(char* pData)
{
    if(pData == NULL)
        return NULL;
    char* begin = pData;
    char* end = pData;
    while(*end != '\0')
        end++;
    end--;
    Reverse(begin, end);
    begin = end = pData;
    //以下迭代以' ' 和 '\0'为关键
    //当*begin==' '时begin++
    //当*end == ' ' || *end == '\0'，旋转
    //其他情况是找到一个单词的完整长度，就是end++
    //结束条件*end == '\0', begin = end, begin = '\0'
    while(*begin != '\0')
    {
        if(*end == ' ' || *end == '\0')
        {
            Reverse(begin, end);
            end++;
            begin = end;
        }else if(*begin == ' ')
        {
            begin++;
            end++;
        }else
            end++;
    }
    return pData;
}
//=====牛客，C++方法
class Solution {
public:
    void ReverseStr(string& str, int l, int r){
        while(l < r){
            auto tmp = str[l];
            str[l] = str[r];
            str[r] = tmp;
            l++; r--;
        }
    }
    string ReverseSentence(string str) {
        if(str.empty())
            return str;
        int len = str.length();
        ReverseStr(str, 0, len - 1);
        int i = 0;
        for(int j = 0; j <= len; j++){
            if(str[j] == ' ' || j == len){
                ReverseStr(str, i, j - 1 );
                i = j + 1;
            }
        }
        return str;
    }
};






问题2：
对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。
例如，字符序列S=”abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”。
思路：
如问题1，可以想象把字符串分成两个子字符串，先把所有反转，然后再各自反转

char* LeftRotateString(char* pStr, int n)
{
    if(pStr != NULL)
    {
        int nLength = static_cast(strlen(pStr)); //!!!获取字符数组字符串长度的方式
        if(nLength > 0 && n > 0 && n < nLength)
        {
            char* firstStart = pStr;
            char* firstEnd = pStr + n - 1;
            char* secondStart = firstEnd + 1;
            char* secondEnd = pStr + nLength - 1；
            Reverse(firstStart, firstEnd);
            Reverse(secondStart, secondEnd);
            Reverse(firstStart, secondEnd);
        }
    }
    return pStr;
}
//=====牛客，第一次提交
class Solution {
public:
    string LeftRotateString(string str, int n) {
        string ret = "";
        for(int i = n; i < str.length(); i++)
            ret += str[i];
        for(int i = 0; i < n; i++)
            ret += str[i];
        return ret;
    }
};






















