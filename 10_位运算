题目10：二进制中1的个数
输入一个整数，输出该整数二进制表示中的个数。（负数用补码表示）

相关知识：
位运算就是对每一位上0或1的运算：与、或、异或、左移、右移

（程序员圈的笑话：世界上有10种人，一种人知道二进制，而另一种人不知道二进制）

例如Excel表格里的A~Z的26进制的转换

左移n位：右边补上n个0
右移n位：正整数左边补n个0，负整数左边补n个1


//====方法一
int numberof1(int n)
{
    int count = 0;
    while(n){
        if(n&1)
            count++;
        n = n >> 1;
    }
    return count;
}
这种方法容易陷入死循环：在面对输入是负数的时候
注意：代码中不可以把右移替换为除以2，因为除法的效率比移位运算要低很多，在实际中应尽可能地应用移位运算符代替除法

//====方法二
int numberof1(int n)
{
    int count = 0;
    unsigned int flag = 1;  //注释一个32位的标志
    while(flag){
        if(n&flag)
            count++;
        flag = flag << 1;
    }
    return count;
}
移动标志位可以避免陷入死循环

//====方法三
int numberof1(int n)
{
    int count = 0;
    while(n){
        count++;
        n = n & (n - 1);
    }
    return count;
}
这种方法时空消耗比上两种的都要好，快
一个整数和自身减1相与，得到的结果会把该整数最右边一个1变成0；
总结就是：
把一个整数减去1之后再和原来的整数做位与运算，得到的结果相当于是把整数的二进制表示中的最右边一个1变成0。很多二进制问题都可以用此方法解决


//=====第一次提交，运行超时
class Solution {
public:
     int  NumberOf1(int n) {
         if(n == 0)
             return 0;
         uint32_t flag = 1;
         int count = 0;
         while(flag){
             if(n & flag)
                 count++;
             flag << 1;
         }
         return count;
     }
};

//=====第二次提交，快准
class Solution {
public:
     int  NumberOf1(int n) {
         int count = 0;
         while(n){
             count++;
             n = n & (n-1);
         }
         return count;
     }
};






















