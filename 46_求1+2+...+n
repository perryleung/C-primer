问题46：
求1+2+3+...+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。

方法一：利用构造函数
定义一个类型，创建n个该类型的实例，相当于调用了n次构造函数，可以将累加的代码放在构造函数中；
class Temp
{
public:
    Temp(){ ++n; sum += n;}
    static void Reset() {n = 0; sum = 0;}       //静态函数，类型外也可以调用
    static unsigned int GetSum() { return sum;}
private:
    static unsigned int n;
    static unsigned int sum;
}
unsigned int Temp::n = 0;
unsigned int Temp::sum = 0;
unsigned int Sum1(unsigned int n)
{
    Temp::Reset();
    Temp *temp = new Temp[n];
    delete []temp;
    temp = NULL;
    return Temp::GetSum();
}

方法二：利用虚函数
定义两个函数，一个函数用来递归，一个函数用来判断
    ####把数值转换成布尔变量####
    对 n连续两次取反，既(!!n)，那么非零n转换为true，零为false；
代码：
class A;
A* Array[2];

class A
{
public:
    virtual unsigned int Sum(unsigned int n) { return 0; }
};
class B : public A
{
public:
    virtual unsigned int Sum(unsigned int n) 
    {   return Array[!!n]->Sum(n-1) + n; }
};
int Sum2(int n)
{
    A a;
    B b;
    Array[0] = &a;  //当 n == 0 时用 A::Sum
    Array[1] = &b;  //当 n != 0 时用 B::Sum
    int value = Array[1]->Sum(n);
    return value;
}

方法三：用函数指针，（c语言呢，C++也可）
typedef unsigned int (*fun)(unsigned int);
unsigned int Teminator(unsigned int n)
{
    return 0;
}
unsigned int Sum3(unsigned int n)
{
    static fun f[2] = {Teminator, Sum3};    //程序入口
    return n + f[!!n](n - 1);
}

方法四：用模板
利用编译器完成递归
template<unsigned int n> 
struct Sum4
{
    enum Value { N = Sum4<n-1>::N + n};
}
template<>
struct Sum4<1>
{
    enum Value { N = 1};
}

//====牛客上直接递归，没有说不能用加法
class Solution {
public:
    int Sum_Solution(int n) {
        if(n < 1)
            return 0;
        return n + Sum_Solution(n - 1);
    }
};





