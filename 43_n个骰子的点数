题目：
把 n个骰子扔在地上，朝上的点数之和为 s，输入 n，打印出 s所有可能的值出现的概率；

思路：
n个骰子最小的点数是：n
最大的点数是：6n
n个骰子的所有点数排列数为：6^n
统计每一个点数出现的次数，再除以 6^n，即可求出每个点数的概率

方法一：递归，效率不高
1、把n个骰子分成两堆，一堆一个，另一堆n-1个，需要计算从 1到 6的每一种点数和剩下的 n-1个骰子来计算点数和；
2、把剩下的 n-1个骰子分成两堆，一堆1个，一堆 n-2个，
3、顶一个一个长度是 ( 6n - n + 1)的数组，和为 s 的点数出现的次数保存至第 s - n个元素中
//=====代码
const int g_maxValue = 6;
void PrintProbability(int num)
{
    if(num < 1)
        return;
    int maxSum = num * g_maxValue;
    int* pProbabilities = new int[maxSum - num + 1];
    for(int i = num; i <= maxSum; i++)
        pProbabilities[i-num] = 0;  //初始化
    Probability(num, pRobabilities);
    
    int total = pow((double)g_maxValue, number);
    for(int i = num; i <= maxSum; i++)
    {
        double ratio = (double)pProbabilities[i-num] / total;
        printf("%d : %e\n", i, ratio);
    }
    delete [] pProbabilities;
}
void Probability(int num, int* pProbabilities)
{   
    for(int i = 1; i <= g_maxValue; i++)
        Probability(num, num, i, pProbabilities);
}
void Probability(int original, int current, int sum, int* pProbabolities)
{
   if(current == 1)
        pProbabolities[sum - original]++;
    else
        for(int i = 1; i <= g_maxValue; ++i)
            Probability(original, current-1, i + sum, pProbabolities);    
}




























