问题11：实现函数double Power(double base, int exponent)，求base的exponent次方。不得使用库函数，同时不需要考虑大数问题。


一些干货：

下面是错误的：
double d1, d2;...
if(d1==d2)  ...
由于精度原因不能用等号判断两个小数是否相等

规范的代码包括：清晰的书写，清晰的布局，合理的命名

应聘时写代码最好用完整的英文单词组合命名变量和函数，让人一眼读懂代码意图

代码的完整性：功能测试、边界测试、负面测试

面对任意大的数字，就是大数问题，需要特殊的数据结构来表示，一个方法是用字符串或者数组来表示大的数字，以确保不会溢出

边界测试：通常在循环和递归中，循环的边界值，递归终止的条件

错误输入：当输入不符合要求时还要能做出合理的错误处理

软件开发过程中永远不变的是需求会一直改变，尽量把将来需求可能的变化都考虑进去，以便未来需求变化时尽量减少代码改动的风险

3种错误处理的方法：
（1）函数用返回值来告诉调用者是否出错。
    例如在Windows中返回值不为0表示在API调用过程中出错了。这种方式使用不方便。
    因为函数不能直接把计算结果通过返回值赋值给其他变量，同时也不能把这个函数计算的结果直接作为参数传递给其他函数。
（2）发生错误时设置一个全局变量。
    此时可以返回值中传递计算结果。比第一种更方便，因为可以直接把返回值赋值给其他变量或者作为参数传递给其他函数。
    有个问题：调用者很容易忘记去检查全局变量，因此在调用出错时忘记做相应的错误处理，留下安全隐患。
（3）异常。
    可以根据不同的出错原因定义不同的异常类型，可以根据异常的类型就能知道出错原因，从而做处理。
    显式地划分正常运行的代码块（try模块）和处理异常的代码块（catch模块），逻辑清晰
    
以下答案有问题，当exponent小于1时（0和负数）时怎么办
double power(double base, int exponent)
{
    double result = 1.0;
    for(int i=1; i <= exponent; i++)
        result *= base;
        
    return result;
}

//=======第一次成功提交
class Solution {
public:
    bool global_IvalidInput = false;
    bool equal(double num1, double num2){
        if((num1 - num2 < 0.000001) && (num1 - num2 > -0.0000001) )//要明白这里的&&的意义，去绝对值后必须时&&
            return true;
        else
            return false;
    }
    double PowerWithUnsigedExpoent(double base, unsigned int exponent){
        double ret = 1.0;
        for(unsigned int i = 1;i <= exponent; i++){         //这里要unsigned int
            ret *= base;
        }
        return ret;
    }
    double Power(double base, int exponent) {
        if(equal(base, 0.0) && exponent < 0){
            global_IvalidInput = true;
            return 0.0;
        }
        unsigned int UnsignedExponent = (unsigned int)(exponent);
        if(exponent < 0)
            UnsignedExponent = (unsigned int)(-exponent);
        double ret = PowerWithUnsigedExpoent(base, UnsignedExponent);
        if(exponent < 0)
            ret = 1.0 / ret;            //这里的分子要1.0
        return ret;
    }
};

//=======第二次成功提交，用迭代
/*
a^n = a^(n/2) * a^(n/2) ; 或 a^n = a^(n-1) * a^(n-1) * a;
*/
class Solution {
public:
    bool global_IvalidInput = false;
    bool equal(double num1, double num2){
        if((num1 - num2 < 0.000001) && (num1 - num2 > -0.0000001) )//想明白了
            return true;
        else
            return false;
    }
    double PowerWithUnsigedExpoent(double base, unsigned int exponent){
        if(exponent == 0)
            return 1.0;
        if(exponent == 1)
            return base;
        
        double ret = PowerWithUnsigedExpoent(base, exponent >> 1);
        ret *= ret;    //求平方
        if(exponent & 0x1 == 1)
            ret *= base;
        return ret;
    }
    double Power(double base, int exponent) {
        if(equal(base, 0.0) && exponent < 0){
            global_IvalidInput = true;
            return 0.0;
        }
        unsigned int UnsignedExponent = (unsigned int)(exponent);
        if(exponent < 0)
            UnsignedExponent = (unsigned int)(-exponent);
        double ret = PowerWithUnsigedExpoent(base, UnsignedExponent);
        if(exponent < 0)
            ret = 1.0 / ret;//这里的分子要1.0
        return ret;
    }
};
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
