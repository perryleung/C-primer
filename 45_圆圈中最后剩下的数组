问题45：
0——n-1这n个数字排成一个圈，从 0开始，每次从这个圆圈里删除第m个数字，求出这个圆圈里剩下的最后一个数字

第一种方法：
用环形链表模拟圆圈，用std::list来模拟一个环形链表
每当迭代器扫描到链表末尾时，要记得把迭代器移到链表头部；
//=====代码：
int LastRemaining(unsigned int n, unsigned int m)
{
    if(n < 1 || m < 1)
        return -1;
    list<int> num;
    for(int i = 0; i < n; i++)
        num.push_back(i);
    list<int>::iterator cur_iter = num.begin();
    while(num.size() > 1)
    {
        for(int i = 1; i < m; ++i) //从第一个开始
        {
            iter++;
            if(cur_iter == num.end())
                cur_iter = num.begin();
        }
        list<int>::iterator next_iter = cur_iter + 1;
        if(next_iter == num.end())
            next_iter = num.begin();
        num.erease(cur_iter);
        cur_iter = next_iter;
    }
    return *cur_iter;
}
分析：每删除一个数字需要m步运算，总共n个数字，时间复杂度 O(mn)，空间复杂度 O(n)

方法二：与瑟夫环的原理，不太懂
class Solution {
public:
    int LastRemaining_Solution(int n, int m)
    {
        if(n < 1 || m < 1)
            return -1;
        return n == 1 ? 0 : (LastRemaining_Solution(n - 1, m) + m) % n;
    }
};
或
class Solution {
public:
    int LastRemaining_Solution(int n, int m)
    {
        if(n < 1 || m < 1)
            return -1;
        int last = 0;
        for(int i = 2; i <= n; i++)
            last = (last + m) % i;
        return last;
    }
};























