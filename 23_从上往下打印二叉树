问题23：从上往下打印出二叉树的每个节点，同层节点从左至右打印

课本思路：
（1）利用一个辅助队列，每一次打印一个结点的时候，如果该节点有子节点，则把该节点的子节点放到一个队列的末尾；
（2）接下来到队列的头部取出最早进入队列的结点，重复前面的打印操作，直到队列中所有结点都被打印出来为止；
（3）利用STL中的deque（两端都能进出队列），直接用queque就好

扩展：
1、树是图的一种特殊退化形式，从上到下按层遍历二叉树，从本质上来说就是广度优先遍历二叉树；
2、广度优先遍历都要用到队列。（有向图和树）
  （1）把起始结点放入队列中；
  （2）每一次从队列的头部取出一个结点，遍历这个结点之后把从它能到达的结点（对树而言是子节点）都依次放入队列；
  （3）重复这个遍历过程，直到队列中的结点全部被遍历
  
  
//=====课本上用的deque代码
void PrintFromTopToBottom(BinaryTreeNode* pTreeRoot)
{
    if(!pTreeRoot)
        return;
    std::deque<BinaryTreeNode* > dequeTreeNode;
    dequeTreeNode.push_back(pTreeRoot);
    while(dequeTreeNode.size())
    {
        BinaryTreeNode *pNode = dequeTreeNode.front();
        dequeTreeNode.pop_front();
        
        printf("%d", pNode->value);
        
        if(pNode->left)
            dequeTreeNode.push_back(pNode->left);
        if(pNode->right)
            dequeTreeNode.push_back(pNode->right);        
    }
}

//=====第一次提交，网上和课本是一样的思路
class Solution {
public:
    vector<int> PrintFromTopToBottom(TreeNode* root) {
        vector<int> result;
        if(!root)
            return result;
        queue<TreeNode*> queue_tmp;
        queue_tmp.push(root);
        while(!queue_tmp.empty()){
            TreeNode* pNode = queue_tmp.front();
            queue_tmp.pop();
            result.push_back(pNode->val);
            if(pNode->left)
                queue_tmp.push(pNode->left);
            if(pNode->right)
                queue_tmp.push(pNode->right);
        }
        
        return result;
    }
};


