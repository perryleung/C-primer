问题26：复杂链表的复制
输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针random指向一个随机节点），请对此链表进行深拷贝，并返回拷贝后的头结点。
（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）
（注意，随机节点也可能是空节点）

分而治之的思想：
将大问题转换成小问题，再把小问题逐个击破，可以递归解决

课本思路：
复杂链表的概念：有两个指针，一个是指向下一个结点，一个是指向任意节点（包括空节点）

三个思路方法：
第一，先复制原始链表上的每一个结点，并用next指针连接起来；
      然后设置每个结点的随机指针，由于随机指针可能指向结点前方的结点或结点后方的结点，因此需要从头开始找；
      这就让时间复杂度为O(n²)
第二，先复制原始链表上的每一个结点，并用next指针连接起来；
      同时把结点配对的信息用一个哈希表<N,N'>存储起来，由于有了哈希表就可以用O(1)时间来找到；
      这就让消耗了O(n)空间
第三，先复制原始链表上的每一个结点，并用next指针连接起来；
      让新复制的结点连接在源节点的后面；
      下一步就是新next结点是原next结点的下一个结点；
      且新随机结点是原随机结点的下一个结点；
      把这个长链表拆分成两个链表：一个是原来的链表，一个是新的复制而来的链表
 
//=====课本代码
void CloneNodes(ComplexListNode* pHead)
{
    if(!pHead)      //如果是空则要返回
        return;  
    ComplexListNode* pNode = pHead;
    while(pNode != NULL)
    {
        ComplexListNode* pCloned = new ComplexListNode();   //开辟动态内存，创建新节点
        pCloned->val = pNode->val;                          //复制新值
        pCloned->next = pNode->next;                        //指向下一个
        pCloned->random = NULL;                             //先空，下一步再炮制        
        pNode->next = pCloned;                              //链接源节点和新节点
        pNode = pCloned->next;                              //更新源节点索引
    }
}
void ConnectRandomNodes(ComplexListNode* pHead)
{
    ComplexListNode* pNode;
    while(pNode != NULL)
    {
        ComplexListNode* pCloned = pNode->next;
        if(pNode->random != NULL)
            pCloned->random = pNode->random->next;          //将随机结点复制
        pNode = pCloned->next;                              //更新源节点索引
    }
}
ComplexListNode* ReconnectNodes(ComplexListNode* pHead)
{
    ComplexListNode* pNode = pHead;                         //源链表索引节点
    ComplexListNode* ret = NULL;                            //复制的头节点                            
    ComplexListNode* pCloned = NULL;                        //复制的链表索引节点
    
    if(pNode != NULL)
    {
        ret = pCloned = pNode->next;                        //先把头节点和复制索引节点确定
        pNode = pCloned->next;
    }
    while(!pNode)                                           //拆分
    {
        pClonedNode->next = pNode->next;
        pCloned = pNode->next;
        pNode->next = pClonedNode->next;
        pNode = pCloned->next;
    }
    return ret;
}
ComplexListNode* Clone(ComplexListNode* pHead)
{
    CloneNodes(pHead);
    ConnectRandomNodes(pHead);
    return ReconnectNodes(pHead);
}

//=====第一次提交
/*
struct RandomListNode {
    int label;
    struct RandomListNode *next, *random;
    RandomListNode(int x) :
            label(x), next(NULL), random(NULL) {
    }
};
*/
class Solution {
public:
    RandomListNode* Clone(RandomListNode* pHead)
    {
        if(!pHead)
            return NULL;
        RandomListNode* pNode = pHead;
        while(pNode){
            RandomListNode* pCloned = new RandomListNode(0);
            pCloned->label = pNode->label;//新节点，要赋值
            pCloned->next = pNode->next;
            pCloned->random = NULL;
            pNode->next = pCloned;
            pNode = pCloned->next;
        }
        pNode = pHead;
        while(pNode){
            RandomListNode* pCloned_tmp = pNode->next;
            if(pNode->random)
                pCloned_tmp->random = pNode->random->next;
            pNode = pCloned_tmp->next;
        }
        pNode = pHead;
        RandomListNode* retHead = pHead->next;
        RandomListNode* pCloned_tmp_tmp = retHead;
        pNode->next = pCloned_tmp_tmp->next;
        while(pNode){
            pCloned_tmp_tmp->next = pNode->next;              //
            pNode = pCloned_tmp_tmp->next->next;              //这里出问题
        } 
        return retHead;
    }
};
//=====第二次提交
class Solution {
public:
    RandomListNode* Clone(RandomListNode* pHead)
    {
        if(!pHead)
            return NULL;
        RandomListNode* pNode = pHead;
        while(pNode){
            RandomListNode* pCloned = new RandomListNode(0);
            pCloned->label = pNode->label;//新节点，要赋值
            pCloned->next = pNode->next;
            pCloned->random = NULL;
            pNode->next = pCloned;
            pNode = pCloned->next;
        }
        pNode = pHead;
        while(pNode){
            RandomListNode* pCloned_tmp = pNode->next;
            if(pNode->random)
                pCloned_tmp->random = pNode->random->next;
            pNode = pCloned_tmp->next;
        }
        pNode = pHead;
        RandomListNode* retHead = pHead->next;
        RandomListNode* pCloned_tmp_tmp = retHead;
        pNode->next = pCloned_tmp_tmp->next;
        while(pNode){
            pCloned_tmp_tmp->next = pNode->next;
            pCloned_tmp_tmp = pCloned_tmp_tmp->next;
            pNode->next = pCloned_tmp_tmp->next;
            pNode = pCloned_tmp_tmp->next->next;
        }
        return retHead;
    }
};
//=====第三次提交
class Solution {
public:
    RandomListNode* Clone(RandomListNode* pHead)
    {
        if(!pHead)
            return NULL;
        RandomListNode* pNode = pHead;
        while(pNode){
            RandomListNode* pCloned = new RandomListNode(pNode->label);
            pCloned->next = pNode->next;
            pCloned->random = NULL;
            pNode->next = pCloned;
            pNode = pCloned->next;
        }
        pNode = pHead;
        while(pNode){
            RandomListNode* pCloned_tmp = pNode->next;
            if(pNode->random)
                pCloned_tmp->random = pNode->random->next;
            pNode = pCloned_tmp->next;
        }
        pNode = pHead;
        RandomListNode* retHead = pHead->next;
        RandomListNode* pCloned_tmp_tmp = retHead;
        pNode->next = pCloned_tmp_tmp->next;
        pNode = pNode->next;
        while(pNode){
            pCloned_tmp_tmp->next = pNode->next;
            pCloned_tmp_tmp = pCloned_tmp_tmp->next;
            pNode->next = pCloned_tmp_tmp->next;
            pNode = pCloned_tmp_tmp->next->next;
        }
        return retHead;
    }
};
//=====第四次提交，才成功，注意多看几遍细节
class Solution {
public:
    RandomListNode* Clone(RandomListNode* pHead)
    {
        if(!pHead)
            return NULL;
        RandomListNode* pNode = pHead;
        while(pNode){
            RandomListNode* pCloned = new RandomListNode(pNode->label);
            pCloned->next = pNode->next;
            pCloned->random = NULL;
            pNode->next = pCloned;
            pNode = pCloned->next;
        }
        pNode = pHead;
        while(pNode){
            RandomListNode* pCloned_tmp = pNode->next;
            if(pNode->random)
                pCloned_tmp->random = pNode->random->next;
            pNode = pCloned_tmp->next;
        }
        pNode = pHead;
        RandomListNode* retHead = pNode->next;
        RandomListNode* pCloned_tmp_tmp = retHead;
        pNode->next = pCloned_tmp_tmp->next;
        pNode = pNode->next;
        while(pNode){
            pCloned_tmp_tmp->next = pNode->next;
            pCloned_tmp_tmp = pCloned_tmp_tmp->next;
            pNode->next = pCloned_tmp_tmp->next;
            pNode = pNode->next;
        }
        return retHead;
    }
};






















