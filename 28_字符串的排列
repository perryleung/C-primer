问题28：输入一个字符串,按字典序打印出该字符串中字符的所有排列。
例如输入字符串abc,则按字典序打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。
输入一个字符串,长度不超过9(可能有字符重复),字符只包括大小写字母。

课本思路：
将复杂问题分解成小问题：将字符串分成两部分：第一部分是第一个字符、第二部分是剩下的字符串
然后排序这两个部分的顺序；
再将第二部分的字符串同样分解成两部分后再排序
（1）把字符串分成两部分，一部分是字符串的第一个字符，另一部分是第一个字符以后的所有字符，求第二部分的字符串的排列；
（2）拿第一个字符和它后面的字符逐个交换；

/*就是递归*/

//=====课本代码
void Permutation(char* pStr)
{
    if(pStr == NULL)
        return;
    Permutation(pStr, pStr);
}
void Permutation(char* pStr, char* pBegin)
{
    if(*pBegin == '\0')
        printf("%s\n",pStr);
    else
    {
        for(char* pCh = pBegin; *pCh != '\0'; ++pCh)
        {
            char temp = *pCh;
            *pCh = *pBegin;
            *pBegin = temp;
            
            Permutation(pStr, pBegin + 1);
            
            temp = *pCh;
            *pCh = *pBegin;
            *pBegin = temp;
        }
    }
}
//=====牛客大神写法
class Solution {
public:
    vector<string> Permutation(string str) {
        vector<string> res;
        if(str.size() == 0) return res;
        permutation(str, 0, str.size(), res);
        return res;
    }
    void permutation(string str, int index, int len, vector<string> &res){
        if(index == len - 1){
            res.push_back(str);
            return;
        }
        for(int i = index; i < len; i++){
            if(i != index && str[i] == str[index])
                continue;        //相同就不用换啦
            swap(str[i],str[index]);
            permutation(str, index + 1, str.size(), res);
        }
    }
};

//===相关题目1
问题：求所有字符的组合，如输入a\b\c，则有组合：a、b、c、ab、ac、bc、abc，注意ab和ba是同一个组合
方法：
（1）求n个字符的长度为m(1<=m<=n)的组合，把这n个字符分成两部分：第一个字符和其余的所有字符；
（2）如果组合里包含第一个字符，则下一步在剩余的字符里选取 m-1 个字符；
（3）如果组合里不包含第一个字符，则下一步在剩余的 n-1 个字符里选取 m 个字符；
既：把求n个字符组成长度为m的组合的问题分解成两个子问题：
分别求 n-1个字符串中长度为 m-1的组合，以及求 n-1个字符的长度为 m的组合；
可用递归

//===相关题目2
问题：输入一个包含8个数字的数组，判断这8个数字是否能组成一个正方体；
思路：
判断三对对立面上的4个顶点都相等，即为正方体；
方法：
（1）先得到a1~a8这8个数字的所有排列；
（2）判断有没有某一个排列符合题目给定的条件：
    a1+a2+a3+a4 = a5+a6+a7+a8;
    a1+a3+a5+a7 = a2+a4+a6+a8;
    a1+a2+a5+a6 = a3+a4+a7+a8;

//===相关题目3
问题：8*8国际象棋棋盘上摆着8个皇后，任意两个皇后不能在同一行、同一列、同一对角线上
思路 & 方法：
（1）肯定是每一个皇后各占一行；
（2）定义一个数组ColumnIndex[8]，代表8行，第i个数字代表第i行皇后的列号；
（3）用0~7数字初始化数组，然后全排列；
（4）因为用的是不同数字去初始化数组，所以已经可以保证皇后能在不同行、不同列；
（5）保证不在对角线的判断：
    i - j != ColumnIndex[i] - ColumnIndex[j];
    j - i != ColumnIndex[j] - ColumnIndex[i];

//====举一反三
若有题目要按照一定要求摆放若干个数字/字符，则可以先求出这些数字/字符的所有排列，然后再一一判断每个排列是否符合要求
































