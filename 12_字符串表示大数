问题12：打印1到最大的n位数
输入数字n，按顺序打印出从1最大的n位十进制数。比如输入3，则输出打印1、2、3一直到最大的3位数999

//因为怕溢出，所以用int和long long 有风险：
void Print1ToMaxOfNDigits_1(int n)
{
    int number = 1;
    int i = 0;
    while(i++<n)
        number *= 10;
    for(int i=1; i<number; i++)
        printf("%d\t", i);
}

最常用也是最容易的方法时用字符串或数组表达大数

已知大数是n位，我们需要n+1位的字符串，最后一位是'\0'

//=======书本上的方法
void Print1ToMaxOfNDigits(int n)
{
    if(n <= 0)
        return;
    char *number = new char[n+1];       //开辟内存
    memset[number, '0', n];             //初始化
    char[n] = '\0';                     //初始化末尾
    
    while(!Increment(number)){
        PrintNumber(number);
    }
    delete [] number;
}

bool Increment(char* number)
{
    bool isOverflow = false;
    int nTakeOver = 0;
    int nLength = strlen(number);
    
    for(int i = nLength - 1; i>=0; i--){
        int nSum = number[i] - '0' + nTakeOver;
        if(i == nLength - 1)
            nSum++;
            
        if(nSum >= 10){
            if( i == 0)
                isOverflow = true;
            else{
                nSum -= 10;
                nTakeOver = 1;
                number[i] = '0' + nSum;
            }
        }else{
            number[i] '0' + nSum;
            break;
        }
    }
    return isOverflow;   
}

void PrintNumber(char* number)
{
    bool isBeginning0 = true;
    int nLength = strlen(number);
    
    for(int i=0; i<nLength; i）{
        if(isBeginning0 && number[i] != '0';
            isBeginning0 = false;
        if(!isBeginning0)
            printf("%c", number[i]);
    }
}

//相关
定义一个函数实现任意两个整数的加法。由于没有限定输入两个数的大小范围，要把问题当作大数问题解决






























